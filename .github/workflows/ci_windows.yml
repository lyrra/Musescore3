name: build_Windows

on:
  schedule:
    - cron: '0 4 1 * *'
  workflow_dispatch:
    inputs:
      build_mode:
        description: 'Build mode: devel_build, stable_build'
        required: true
        default: 'devel_build'

jobs:
  build_x64:
    runs-on: windows-latest
    steps:
    # An alternative to using the msys2 action (from https://github.com/marketplace/actions/setup-msys2),
    # would be to do it manually: download msys2 from https://github.com/msys2/msys2-installer/releases/tag/nightly-x86_64
    - name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.11.0
    - uses: msys2/setup-msys2@v2
      with:
        msystem: mingw64
        update: true
        install: >-
          base-devel
          git
          zip
          gettext-devel
          mingw-w64-x86_64-make
          mingw-w64-x86_64-autotools
          mingw-w64-x86_64-libtool
          mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-binutils
          mingw-w64-x86_64-gettext
          mingw-w64-x86_64-gnutls
          mingw-w64-x86_64-gc
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-gcc-libs
          mingw-w64-x86_64-libffi
          mingw-w64-x86_64-libgcrypt
          mingw-w64-x86_64-libtasn1
          mingw-w64-x86_64-lz4
          mingw-w64-x86_64-pcre2
          mingw-w64-x86_64-readline
          mingw-w64-x86_64-gdb
          mingw-w64-x86_64-zeromq
          mingw-w64-x86_64-cmake
          mingw-w64-x86_64-qt5
          mingw-w64-x86_64-portaudio
          mingw-w64-x86_64-portmidi
          mingw-w64-x86_64-libvorbis
          mingw-w64-x86_64-libsndfile
          mingw-w64-x86_64-libogg
          mingw-w64-x86_64-lame
          mingw-w64-x86_64-jack2
    - name: Clone repo master
      uses: actions/checkout@v4
      with:
        ref: main
        path: m
    - name: Setup
      shell: msys2 {0}
      run: |
        ls -ltr
        cd m
        ls -ltr
        ./build/ci/mingw/setup.sh
    - name: Build
      shell: msys2 {0}
      run: |
        cd m
        ./build/ci/mingw/build.sh
    - name: Package
      shell: msys2 {0}
      run: |
        cd m
        ./build/ci/mingw/package.sh
    - name: Artifact
      uses: actions/upload-artifact@v4
      with:
        name: mingw-w64-musescore3
        path: m/musescore3-mingw64.zip
    - name: version
      run: echo "version=$(date +%Y%m%d)" >> $GITHUB_OUTPUT
      id: version
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: release-mingw-${{ steps.version.outputs.version }}
        release_name: mingw-${{ steps.version.outputs.version }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./m/musescore3-mingw64.zip
        asset_name: musescore3-mingw64.zip
        asset_content_type: application/zip
  upload-weekly:
    permissions:
      contents: write
    needs:
      - build_x64
    if: github.ref == 'refs/heads/main'
    runs-on: windows-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: mingw-w64-musescore3*
          merge-multiple: true
      - name: Upload musescore release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          gh release upload weekly-mingw musescore3* --clobber -R ${{ github.repository }}

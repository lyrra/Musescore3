(use-modules (srfi srfi-1))

(define (eval-c-type args)
  (let ((name #f)
        (c-type #f)
        (datatype #f)
        (types '())
        (start-index #f))
    (do ((lst args (cdr lst)))
        ((null? lst))
      (let ((pair (car lst)))
        (match (car pair)
          ('name (set! name (cdr pair)))
          ('c-type (set! c-type (cdr pair)))
          ('datatype (set! datatype (cdr pair)))
          ('types (set! types (cdr pair)))
          ('start-index (set! start-index (cdr pair)))
          (_ (error "unknown c-type directive" (car pair))))))
    (let ((n 0)
          (nl (format #f "~%")))
      (list (list "enum class " (format #f "~a " c-type) " ")
            (if datatype (list ": " datatype) "")
            "{" nl
            (map (lambda (type)
                   (set! n (1+ n))
                   (list (if (> n 1) "," "")
                         (cond
                          ((symbol? type)
                           (if (and start-index (= n 1))
                               (format #f "~a = ~a~%" type start-index)
                               (format #f "~a~%" type)))
                          ((pair? type)
                           (let ((enumname (car type))
                                 (enuminit (cadr type)))
                             (cond
                              ((number? enuminit)
                               (format #f "~a = ~a~%" enumname enuminit))
                              ((pair? enuminit)
                               (match (car enuminit)
                                 ('or
                                  (list enumname " = "
                                        (fold (lambda (x a)
                                                (if (number? x)
                                                    (format #f " ~a | ~a" x a)
                                                    (format #f " ~a::~a | ~a" name x a)))
                                              (if (number? (cadr enuminit))
                                                  (cadr enuminit)
                                                  (format #f "~a::~a" name (cadr enuminit)))
                                              (cddr enuminit))
                                        nl))))))))))
                 types)
            "};" nl nl))))

name: CI_Windows

on:
  push:
    branches:
    - 3.x
  pull_request:
    branches:
    - funnel
  schedule:
    - cron: '0 4 * * 0' # At 04:00 on every sunday
  workflow_dispatch:
    inputs:
      build_mode:
        description: 'Build mode: devel_build, nightly_build, testing_build, stable_build'
        required: true
        default: 'devel_build'
      publish:
        description: 'Publish to FTP: on - publish'
        required: false
        default: 'off'   

jobs:
  build_x64:
    runs-on: windows-latest
    steps:
    # An alternative to using the msys2 action (from https://github.com/marketplace/actions/setup-msys2),
    # would be to do it manually: download msys2 from https://github.com/msys2/msys2-installer/releases/tag/nightly-x86_64
    - name: Cancel Previous Runs
      uses: styfle/cancel-workflow-action@0.11.0
    - uses: msys2/setup-msys2@v2
      with:
        msystem: mingw64
        update: true
        install: >-
          base-devel
          git
          gettext-devel
          mingw-w64-x86_64-autotools
          mingw-w64-x86_64-libtool
          mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-binutils
          mingw-w64-x86_64-gettext
          mingw-w64-x86_64-gnutls
          mingw-w64-x86_64-gc
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-gcc-libs
          mingw-w64-x86_64-libffi
          mingw-w64-x86_64-libgcrypt
          mingw-w64-x86_64-libtasn1
          mingw-w64-x86_64-lz4
          mingw-w64-x86_64-pcre2
          mingw-w64-x86_64-readline
          mingw-w64-x86_64-gdb
          mingw-w64-x86_64-zeromq
    - name: Clone repository
      uses: actions/checkout@v3
      with:
        ref: funnel
    - name: "Configure workflow"
      shell: bash
      run: |
        bash ./build/ci/tools/make_build_mode_env.sh -e ${{ github.event_name }} -m ${{ github.event.inputs.build_mode }}
        BUILD_MODE=$(cat ./build.artifacts/env/build_mode.env)

        DO_PUBLISH='false'
        if [[ "${{ github.event.inputs.publish }}" == "on" || "$BUILD_MODE" == "nightly_build" ]]; then 
          DO_PUBLISH='true'
          if [ -z "${{ secrets.OSUOSL_SSH_ENCRYPT_SECRET }}" ]; then 
            echo "warning: not set OSUOSL_SSH_ENCRYPT_SECRET, publish disabled" 
            DO_PUBLISH='false'
          fi  
        fi

        DO_CHECKSUM='true'
        if [ "$BUILD_MODE" == "devel_build" ]; then DO_CHECKSUM='false'; fi

        DO_APPCAST='true'
        if [ "$BUILD_MODE" == "devel_build" ]; then DO_APPCAST='false'; fi

        DO_BUILD='true'

        echo "BUILD_MODE=$BUILD_MODE" >> $GITHUB_ENV
        echo "BUILD_MODE: $BUILD_MODE"
        echo "DO_BUILD=$DO_BUILD" >> $GITHUB_ENV
        echo "DO_BUILD: $DO_BUILD"
        echo "DO_PUBLISH=$DO_PUBLISH" >> $GITHUB_ENV
        echo "DO_PUBLISH: $DO_PUBLISH"
        echo "DO_CHECKSUM=$DO_CHECKSUM" >> $GITHUB_ENV
        echo "DO_CHECKSUM: $DO_CHECKSUM"
        echo "DO_APPCAST=$DO_APPCAST" >> $GITHUB_ENV
        echo "DO_APPCAST: $DO_APPCAST"
    - name: Build
      if: env.DO_BUILD == 'true'
      shell: cmd
      run: |
        IF ${{ secrets.TELEMETRY_TRACK_ID != 0 }} == true ( SET T_ID=${{ secrets.TELEMETRY_TRACK_ID }} ) ELSE ( SET T_ID="''" )
        IF ${{ secrets.SENTRY_SERVER_MU3_KEY != 0 }} == true ( SET C_KEY=${{ secrets.SENTRY_SERVER_MU3_KEY }} ) ELSE ( SET C_KEY="''" )
        build\ci\windows\build.bat -n ${{ github.run_id }} --telemetry %T_ID% --sentrykey %C_KEY%
    - name: Package 
      if: env.DO_BUILD == 'true'
      shell: cmd
      run: |
        IF ${{ secrets.WIN_SIGN_CERTIFICATE_ENCRYPT_SECRET != 0 }} == true ( SET S_S=${{ secrets.WIN_SIGN_CERTIFICATE_ENCRYPT_SECRET }} ) ELSE ( SET S_S="''" )
        IF ${{ secrets.WIN_SIGN_CERTIFICATE_PASSWORD != 0 }} == true ( SET S_P=${{ secrets.WIN_SIGN_CERTIFICATE_PASSWORD }} ) ELSE ( SET S_P="''" )
        IF ${{ env.BUILD_MODE }} == stable_build ( SET GUID=${{ secrets.WIN_MSI_STABLE_GUID }} ) ELSE ( SET GUID=${{ secrets.WIN_MSI_TESTING_GUID }} )
        build\ci\windows\package.bat --signsecret %S_S% --signpass %S_P% --guid %GUID%
    - name: Checksum
      if: env.DO_CHECKSUM == 'true' 
      run: |
        bash ./build/ci/tools/checksum.sh     
    - name: Publish package
      if: env.DO_PUBLISH == 'true'
      shell: bash
      run: |
        bash ./build/ci/tools/osuosl/publish.sh -s ${{ secrets.OSUOSL_SSH_ENCRYPT_SECRET }} --os windows -v 3
    - name: AppCast
      if: env.DO_APPCAST == 'true'   
      shell: bash
      run: |
        bash ./build/ci/tools/sparkle_appcast_gen.sh -p windows 
    - name: Upload artifacts on GitHub
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: MuseScore_x64_${{ github.run_id }}
        path: build.artifacts\ 


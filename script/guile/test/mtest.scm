(define-module (mtest)
               #:use-module (ice-9 format)
               #:use-module (ice-9 match)
               #:use-module (ice-9 ftw)
               #:use-module (srfi srfi-1)  ; fold
               #:use-module (srfi srfi-43) ; vector library
               #:use-module (system foreign)
               #:use-module (musescore-c))

(eval-when (expand load eval)
  (load-from-path "test/common.scm")
  (load-from-path "test/test.scm")
  (load-from-path "test/ffi.scm")
  (load-from-path "test/testlib.scm"))

(define (test-filter-args args)
  (fold (lambda (item acc)
          (cond
            ((equal? (string-contains item "--inc=") 0)
             (cons (cons #:inc (substring item 6)) acc))
            ((equal? (string-contains item "--exc=") 0)
             (cons (cons #:exc (substring item 6)) acc))
            (else acc)))
        '()
        args))

(define (fold-find-inc/exc name filter)
  (fold (lambda (item acc)
          (if (and (pair? item)
                   (eq? (car item) name))
              (cons (cdr item) acc)
              acc))
        '() filter))

(define (fold-string-contains str lst beginacc found)
  (fold (lambda (filt acc)
          (if (string-contains str filt)
              found acc))
        beginacc lst))

(define (apply-filter-file file test-filter)
  (let ((inc (fold-find-inc/exc #:inc test-filter))
        (exc (fold-find-inc/exc #:exc test-filter)))
    (cond
      ((not (null? inc))
       (fold-string-contains file inc #f #t))
      ((not (null? exc))
       (fold-string-contains file exc #t #f))
     (else #t))))

(define (get-test-files)
  (let ((test-filter (test-filter-args (command-line)))
        (test-files (sort (map car
                               (cddr (file-system-tree "../../script/guile/test/t")))
                          string<)))
    (fold (lambda (file acc)
            (if (apply-filter-file file test-filter)
                (cons file acc)
                acc))
          '()
          test-files)))

(let ((test-files (get-test-files))
      (n 0))
  (for-each (lambda (file)
              (if (not (eqv? (string-contains-ci file "t_") 0))
                (load-from-path (format #f "test/t/~a" file)))
              (set! n (+ n 1)))
            test-files)
  (format #t "Passed ~a tests.~%" n))
